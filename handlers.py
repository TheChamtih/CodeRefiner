from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from database import init_db, get_admin_ids, add_admin, get_locations, get_location_by_id
from config import MAIN_ADMIN_ID
import re
from datetime import datetime
import psycopg2
from psycopg2.extras import DictCursor
import os
from typing import List, Dict
import math

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
def calculate_course_score(user_age: int, user_interests: str, course: Dict) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
    score = 1.0

    # –í–µ—Å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (—á–µ–º –±–ª–∏–∂–µ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, —Ç–µ–º –ª—É—á—à–µ)
    age_range_center = (course['min_age'] + course['max_age']) / 2
    age_distance = abs(user_age - age_range_center)
    age_score = 1.0 / (1 + age_distance)
    score *= age_score

    # –í–µ—Å –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
    user_interests_list = set(user_interests.lower().split())
    course_tags = get_course_tags(course['id'])
    matching_interests = len(user_interests_list.intersection(course_tags))
    interest_score = 1.0 + (matching_interests * 0.5)
    score *= interest_score

    return score

def get_course_tags(course_id: int) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–≥–∏ –∫—É—Ä—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT tag FROM course_tags WHERE course_id = %s', (course_id,))
    tags = [row[0].lower() for row in cursor.fetchall()]
    conn.close()
    return tags

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NAME, AGE, INTERESTS, PARENT_NAME, PHONE, COURSE_SELECTION, LOCATION_SELECTION, CONFIRMATION = range(8)

def is_valid_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä –Ω–∞ +7 –∏–ª–∏ 8."""
    return re.match(r'^(\+7|8)[\s\-]?(\d{3})[\s\-]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})$', phone) is not None

def notify_admins(context: CallbackContext, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    admins = get_admin_ids()
    for admin in admins:
        try:
            context.bot.send_message(chat_id=admin, text=message)
        except Exception as e:
            print(f"Failed to send message to admin {admin}: {e}")

def clear_user_data(context: CallbackContext):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    context.user_data.clear()

def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ."""
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∫—É—Ä—Å –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞. –ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?")
    return NAME

def get_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞."""
    user_name = update.message.text
    context.user_data['child_name'] = user_name
    update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É?")
    return AGE

def get_age(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ä–µ–±–µ–Ω–∫–∞."""
    try:
        user_age = int(update.message.text)
        if user_age < 6 or user_age > 18:
            update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 18 –ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
            return AGE
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return AGE

    context.user_data['child_age'] = user_age
    update.message.reply_text("–ß–µ–º —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ç.–¥.)")
    return INTERESTS

def get_interests(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Ä–µ–±–µ–Ω–∫–∞."""
    user_interests = update.message.text
    context.user_data['child_interests'] = user_interests
    update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è)")
    return PARENT_NAME

def get_parent_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–æ–¥–∏—Ç–µ–ª—è."""
    parent_name = update.message.text
    context.user_data['parent_name'] = parent_name
    update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ +7 –∏–ª–∏ 8):")
    return PHONE

def get_phone(update: Update, context: CallbackContext) -> int:
    phone = update.message.text
    if not is_valid_phone(phone):
        update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ +7 –∏–ª–∏ 8. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return PHONE

    context.user_data['phone'] = phone

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    child_age = context.user_data['child_age']
    child_interests = context.user_data['child_interests'].lower()

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, name, description, min_age, max_age 
        FROM courses 
        WHERE min_age <= %s AND max_age >= %s
    ''', (child_age, child_age))
    courses = cursor.fetchall()
    conn.close()

    if not courses:
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return ConversationHandler.END

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞
    scored_courses = []
    for course in courses:
        course_dict = {
            'id': course[0],
            'name': course[1],
            'description': course[2],
            'min_age': course[3],
            'max_age': course[4]
        }
        score = calculate_course_score(child_age, child_interests, course_dict)
        scored_courses.append((course, score))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    scored_courses.sort(key=lambda x: x[1], reverse=True)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
    keyboard = []
    for course, score in scored_courses:
        button_text = f"üìö {course[1]}"
        if score > 1.5:  # –ï—Å–ª–∏ –∫—É—Ä—Å –æ—Å–æ–±–µ–Ω–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω
            button_text = "‚≠ê " + button_text
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"course_{course[0]}")])

    keyboard.append([InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="exit")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    recommendation_text = "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Ä—Å—ã:"
    update.message.reply_text(recommendation_text, reply_markup=reply_markup)
    return COURSE_SELECTION

def select_course(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()

    if query.data == "exit":
        query.edit_message_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
        clear_user_data(context)
        return ConversationHandler.END

    course_id = int(query.data.split("_")[1])
    context.user_data['selected_course'] = course_id

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT c.name, c.description, c.min_age, c.max_age,
               string_agg(ct.tag, ', ') as tags
        FROM courses c
        LEFT JOIN course_tags ct ON c.id = ct.course_id
        WHERE c.id = %s
        GROUP BY c.id, c.name, c.description, c.min_age, c.max_age
    ''', (course_id,))
    course = cursor.fetchone()
    conn.close()

    course_info = (
        f"üìö –ö—É—Ä—Å: {course[0]}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {course[1]}\n\n"
        f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {course[2]}-{course[3]} –ª–µ—Ç\n"
        f"üè∑Ô∏è –¢–µ–≥–∏: {course[4] if course[4] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n"
        "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?"
    )

    keyboard = [
        [InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="confirm_yes"),
         InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="confirm_no")],
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="exit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(text=course_info, reply_markup=reply_markup)
    return CONFIRMATION


def confirm_signup(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å."""
    query = update.callback_query
    query.answer()

    if query.data == "exit":
        query.edit_message_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
        clear_user_data(context)
        return ConversationHandler.END

    if query.data == "confirm_yes":
        conn = get_connection()
        cursor = conn.cursor()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            INSERT INTO users (chat_id, parent_name, phone, child_name, child_age, child_interests)
            VALUES (%s, %s, %s, %s, %s, %s)
            RETURNING id
        ''', (
            query.message.chat_id,
            context.user_data['parent_name'],
            context.user_data['phone'],
            context.user_data['child_name'],
            context.user_data['child_age'],
            context.user_data['child_interests']
        ))
        user_id = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
        cursor.execute('SELECT name, description FROM courses WHERE id = %s', (context.user_data['selected_course'],))
        course = cursor.fetchone()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
        cursor.execute('''
            INSERT INTO trial_lessons (user_id, course_id, date, confirmed)
            VALUES (%s, %s, %s, FALSE)
        ''', (user_id, context.user_data['selected_course'], datetime.now()))

        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ:\n\n"
            f"–†–æ–¥–∏—Ç–µ–ª—å: {context.user_data['parent_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
            f"–†–µ–±–µ–Ω–æ–∫: {context.user_data['child_name']} ({context.user_data['child_age']} –ª–µ—Ç)\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {context.user_data['child_interests']}\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {course[0]}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course[1]}\n"
            f"–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        notify_admins(context, admin_message)

        query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")
        conn.close()
    else:
        query.edit_message_text("–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∑–∂–µ.")

    clear_user_data(context)
    return ConversationHandler.END

def get_connection():
    """Gets a connection to the PostgreSQL database."""
    return psycopg2.connect(os.environ['DATABASE_URL'], cursor_factory=DictCursor)

def get_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
            AGE: [MessageHandler(Filters.text & ~Filters.command, get_age)],
            INTERESTS: [MessageHandler(Filters.text & ~Filters.command, get_interests)],
            PARENT_NAME: [MessageHandler(Filters.text & ~Filters.command, get_parent_name)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, get_phone)],
            COURSE_SELECTION: [CallbackQueryHandler(select_course, pattern="^course_|^exit$")],
            CONFIRMATION: [CallbackQueryHandler(confirm_signup, pattern="^confirm_yes$|^confirm_no$|^exit$")],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
    clear_user_data(context)
    return ConversationHandler.END

def help_command(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    admins = get_admin_ids()

    help_text = """
    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

    –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    /start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    /courses - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ
    /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
    /list_locations - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ —à–∫–æ–ª—ã
    """

    if user_id in admins:
        help_text += """
        –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
        /add_admin - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        /delete_course - –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å
        /edit_course - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å
        /view_trials - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        /filter_trials - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        /clear_trials - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        /confirm_trial - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
        /create_course - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å
        /add_location - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —à–∫–æ–ª—ã
        /delete_location - –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å —à–∫–æ–ª—ã
        """

    update.message.reply_text(help_text)

def list_courses(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."""
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM courses')
    courses = cursor.fetchall()
    conn.close()

    if not courses:
        update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å–æ–≤ –Ω–µ—Ç.")
        return

    courses_list = "\n\n".join([
        f"üìö {course[1]}\n"
        f"üìù {course[2]}\n"
        f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {course[3]}-{course[4]} –ª–µ—Ç"
        for course in courses
    ])
    update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n{courses_list}")

def about(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∫–æ–ª–µ."""
    message = (
        "üéì –û —à–∫–æ–ª–µ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞:\n\n"
        "–ú—ã - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —à–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤.\n\n"
        "üìö –ù–∞—à–∏ –∫—É—Ä—Å—ã –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç:\n"
        "‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–æ–≤\n"
        "‚Ä¢ –î–∏–∑–∞–π–Ω\n"
        "‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫—É\n\n"
        "üë®‚Äçüè´ –û–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏\n"
        "üéØ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
        "üìù –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )
    update.message.reply_text(message)

def view_trials(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT 
            trial_lessons.id,
            users.child_name,
            users.parent_name,
            users.phone,
            courses.name,
            trial_lessons.date
        FROM trial_lessons
        JOIN users ON trial_lessons.user_id = users.id
        JOIN courses ON trial_lessons.course_id = courses.id
    ''')
    trials = cursor.fetchall()
    conn.close()

    if not trials:
        update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–µ—Ç.")
        return

    trials_list = []
    for trial in trials:
        trial_info = (
            f"üîñ ID –∑–∞–ø–∏—Å–∏: {trial[0]}\n"
            f"üë∂ –†–µ–±–µ–Ω–æ–∫: {trial[1]}\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {trial[2]}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {trial[3]}\n"
            f"üìö –ö—É—Ä—Å: {trial[4]}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {trial[5].strftime('%d.%m.%Y %H:%M')}\n"
            f"{'=' * 30}"
        )
        trials_list.append(trial_info)

    message = "üìã –ó–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
    for trial in trials_list:
        if len(message + trial) > 4096:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            update.message.reply_text(message)
            message = trial
        else:
            message += trial + "\n"

    if message:
        update.message.reply_text(message)

def add_admin_command(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        admin_chat_id = int(context.args[0])
        add_admin(admin_chat_id)
        update.message.reply_text(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_chat_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <chat_id>")

def confirm_trial(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        trial_id = int(context.args[0])
        conn = get_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        cursor.execute('''
            SELECT 
                trial_lessons.id,
                users.child_name,
                users.parent_name,
                users.phone,
                courses.name as course_name,
                trial_lessons.date,
                trial_lessons.confirmed
            FROM trial_lessons
            JOIN users ON trial_lessons.user_id = users.id
            JOIN courses ON trial_lessons.course_id = courses.id
            WHERE trial_lessons.id = %s
        ''', (trial_id,))
        trial = cursor.fetchone()
        conn.close()

        if not trial:
            update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_trial_{trial_id}_yes"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"confirm_trial_{trial_id}_no")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
        message = (
            f"üìù –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ:\n\n"
            f"üë∂ –†–µ–±–µ–Ω–æ–∫: {trial[1]}\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {trial[2]}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {trial[3]}\n"
            f"üìö –ö—É—Ä—Å: {trial[4]}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {trial[5].strftime('%d.%m.%Y %H:%M')}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' if trial[6] else '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        update.message.reply_text(message, reply_markup=reply_markup)

    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm_trial <ID –∑–∞–ø–∏—Å–∏>")

def handle_confirm_trial(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    query.answer()

    if not query.data.startswith("confirm_trial_"):
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    _, _, trial_id, action = query.data.split("_")
    trial_id = int(trial_id)

    conn = get_connection()
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
    cursor.execute('''
        UPDATE trial_lessons 
        SET confirmed = %s 
        WHERE id = %s
        RETURNING id, 
            (SELECT users.phone FROM users WHERE users.id = trial_lessons.user_id) as phone,
            (SELECT courses.name FROM courses WHERE courses.id = trial_lessons.course_id) as course_name
    ''', (action == "yes", trial_id))

    result = cursor.fetchone()
    conn.commit()
    conn.close()

    if result:
        status = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if action == "yes" else "‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        query.edit_message_text(f"–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ {status}.")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if action == "yes":
            notify_admins(context, f"–ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å '{result[2]}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: {result[1]}")
    else:
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")

    return ConversationHandler.END

def get_confirm_trial_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    return CallbackQueryHandler(
        handle_confirm_trial,
        pattern="^confirm_trial_[0-9]+_(yes|no)$"
    )

def filter_trials(update: Update, context: CallbackContext):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT trial_lessons.id, users.child_name, users.parent_name, users.phone, courses.name, trial_lessons.date, trial_lessons.confirmed
        FROM trial_lessons
        JOIN users ON trial_lessons.user_id = users.id
        JOIN courses ON trial_lessons.course_id = courses.id
        WHERE trial_lessons.confirmed = FALSE
        ORDER BY trial_lessons.date DESC
    ''')
    trials = cursor.fetchall()
    conn.close()

    if not trials:
        update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.")
        return

    trials_list = []
    for trial in trials:
        trial_info = (
            f"üîñ ID –∑–∞–ø–∏—Å–∏: {trial[0]}\n"
            f"üë∂ –†–µ–±–µ–Ω–æ–∫: {trial[1]}\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {trial[2]}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {trial[3]}\n"
            f"üìö –ö—É—Ä—Å: {trial[4]}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {trial[5].strftime('%d.%m.%Y %H:%M')}\n"
            f"{'=' * 30}"
        )
        trials_list.append(trial_info)

    message = "üìã –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
    for trial in trials_list:
        if len(message + trial) > 4096:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            update.message.reply_text(message)
            message = trial
        else:
            message += trial + "\n"

    if message:
        update.message.reply_text(message)

def delete_course(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –∫—É—Ä—Å."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        course_id = int(context.args[0])
        conn = get_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        cursor.execute('SELECT name FROM courses WHERE id = %s', (course_id,))
        course = cursor.fetchone()

        if not course:
            update.message.reply_text("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            conn.close()
            return

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        cursor.execute('DELETE FROM course_tags WHERE course_id = %s', (course_id,))

        # –£–¥–∞–ª—è–µ–º —Å–∞–º –∫—É—Ä—Å
        cursor.execute('DELETE FROM courses WHERE id = %s', (course_id,))
        conn.commit()
        conn.close()

        update.message.reply_text(f"‚úÖ –ö—É—Ä—Å '{course[0]}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_course <ID –∫—É—Ä—Å–∞>")

def clear_trials(update: Update, context: CallbackContext):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="clear_trials_confirm")],
        [InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="clear_trials_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è?",
        reply_markup=reply_markup
    )

def handle_clear_trials(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π."""
    query = update.callback_query
    query.answer()

    if query.data == "clear_trials_confirm":
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM trial_lessons WHERE confirmed = FALSE')
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()

        query.edit_message_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
    else:
        query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
EDIT_COURSE_ID, EDIT_COURSE_NAME, EDIT_COURSE_DESCRIPTION, EDIT_COURSE_MIN_AGE, EDIT_COURSE_MAX_AGE = range(5)

def get_edit_course_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞."""
    return ConversationHandler(
        entry_points=[CommandHandler('edit_course', start_edit_course)],
        states={
            EDIT_COURSE_ID: [MessageHandler(Filters.text & ~Filters.command, get_course_id_to_edit)],
            EDIT_COURSE_NAME: [
                CommandHandler('skip', lambda u, c: get_course_name_to_edit(u, c, skip=True)),
                MessageHandler(Filters.text & ~Filters.command, get_course_name_to_edit)
            ],
            EDIT_COURSE_DESCRIPTION: [
                CommandHandler('skip', lambda u, c: get_course_description_to_edit(u, c, skip=True)),
                MessageHandler(Filters.text & ~Filters.command, get_course_description_to_edit)
            ],
            EDIT_COURSE_MIN_AGE: [
                CommandHandler('skip', lambda u, c: get_course_min_age_to_edit(u, c, skip=True)),
                MessageHandler(Filters.text & ~Filters.command, get_course_min_age_to_edit)
            ],
            EDIT_COURSE_MAX_AGE: [
                CommandHandler('skip', lambda u, c: get_course_max_age_to_edit(u, c, skip=True)),
                MessageHandler(Filters.text & ~Filters.command, get_course_max_age_to_edit)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

def start_edit_course(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT id, name FROM courses')
    courses = cursor.fetchall()
    conn.close()

    if not courses:
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ConversationHandler.END

    courses_list = "\n".join([f"ID: {course[0]} - {course[1]}" for course in courses])
    update.message.reply_text(
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n{courses_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    )
    return EDIT_COURSE_ID

def get_course_id_to_edit(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –∫—É—Ä—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        course_id = int(update.message.text)
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM courses WHERE id = %s', (course_id,))
        course = cursor.fetchone()
        conn.close()

        if not course:
            update.message.reply_text("–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return EDIT_COURSE_ID

        context.user_data['course_id'] = course_id
        context.user_data['current_course'] = course
        update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course[1]}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):"
        )
        return EDIT_COURSE_NAME
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return EDIT_COURSE_ID

def get_course_name_to_edit(update: Update, context: CallbackContext, skip=False) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞."""
    if skip:
        current_course = context.user_data['current_course']
        context.user_data['course_name'] = current_course[1]
    else:
        context.user_data['course_name'] = update.message.text

    update.message.reply_text(
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {context.user_data['current_course'][2]}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):"
    )
    return EDIT_COURSE_DESCRIPTION

def get_course_description_to_edit(update: Update, context: CallbackContext, skip=False) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞."""
    if skip:
        current_course = context.user_data['current_course']
        context.user_data['course_description'] = current_course[2]
    else:
        context.user_data['course_description'] = update.message.text

    update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {context.user_data['current_course'][3]}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π):"
    )
    return EDIT_COURSE_MIN_AGE

def get_course_min_age_to_edit(update: Update, context: CallbackContext, skip=False) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç."""
    if skip:
        current_course = context.user_data['current_course']
        context.user_data['course_min_age'] = current_course[3]
    else:
        try:
            min_age = int(update.message.text)
            if min_age < 0:
                update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return EDIT_COURSE_MIN_AGE
            context.user_data['course_min_age'] = min_age
        except ValueError:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return EDIT_COURSE_MIN_AGE

    update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {context.user_data['current_course'][4]}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π):"
    )
    return EDIT_COURSE_MAX_AGE

def get_course_max_age_to_edit(update: Update, context: CallbackContext, skip=False) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    if skip:
        current_course = context.user_data['current_course']
        context.user_data['course_max_age'] = current_course[4]
    else:
        try:
            max_age = int(update.message.text)
            if max_age <= context.user_data.get('course_min_age', 0):
                update.message.reply_text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return EDIT_COURSE_MAX_AGE
            context.user_data['course_max_age'] = max_age
        except ValueError:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return EDIT_COURSE_MAX_AGE

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE courses 
        SET name = %s, description = %s, min_age = %s, max_age =%s 
        WHERE id = %s
    ''', (
        context.user_data['course_name'],
        context.user_data['course_description'],
        context.user_data['course_min_age'],
        context.user_data['course_max_age'],
        context.user_data['course_id']
    ))
    conn.commit()
    conn.close()

    update.message.reply_text(f"‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    clear_user_data(context)
    return ConversationHandler.END

def edit_course(update:Update, context:CallbackContext):
    pass

def create_course(update:Update, context:CallbackContext):
    pass

def add_location(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω –∏ –∞–¥—Ä–µ—Å."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: /add_location "–†–∞–π–æ–Ω" "–ê–¥—Ä–µ—Å"
        text = " ".join(context.args)
        district, address = text.split('"')[1::2]  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∫–∞–≤—ã—á–∫–∞–º

        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO locations (district, address) VALUES (%s, %s) RETURNING id',
            (district, address)
        )
        location_id = cursor.fetchone()[0]
        conn.commit()
        conn.close()

        update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:\n"
            f"ID: {location_id}\n"
            f"–†–∞–π–æ–Ω: {district}\n"
            f"–ê–¥—Ä–µ—Å: {address}"
        )
    except (IndexError, ValueError):
        update.message.reply_text(
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_location "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞" "–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å"\n'
            '–ü—Ä–∏–º–µ—Ä: /add_location "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π" "—É–ª. –õ–µ–Ω–∏–Ω–∞, 1"'
        )

def list_locations(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–π–æ–Ω–æ–≤ –∏ –∞–¥—Ä–µ—Å–æ–≤."""
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT id, district, address FROM locations ORDER BY district')
    locations = cursor.fetchall()
    conn.close()

    if not locations:
        update.message.reply_text("üìç –ê–¥—Ä–µ—Å–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    message = "üìç –°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –∏ –∞–¥—Ä–µ—Å–æ–≤:\n\n"
    current_district = None

    for loc in locations:
        if loc[1] != current_district:
            current_district = loc[1]
            message += f"\nüè¢ {current_district}:\n"
        message += f"  ‚Ä¢ {loc[2]} (ID: {loc[0]})\n"

    update.message.reply_text(message)

def delete_location(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞–π–æ–Ω –∏ –∞–¥—Ä–µ—Å."""
    if update.message.chat_id not in get_admin_ids():
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        location_id = int(context.args[0])
        conn = get_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        cursor.execute('SELECT district, address FROM locations WHERE id = %s', (location_id,))
        location = cursor.fetchone()

        if not location:
            update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            conn.close()
            return

        # –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å
        cursor.execute('DELETE FROM locations WHERE id = %s', (location_id,))
        conn.commit()
        conn.close()

        update.message.reply_text(
            f"‚úÖ –£–¥–∞–ª–µ–Ω –∞–¥—Ä–µ—Å:\n"
            f"–†–∞–π–æ–Ω: {location[0]}\n"
            f"–ê–¥—Ä–µ—Å: {location[1]}"
        )
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_location <ID –∞–¥—Ä–µ—Å–∞>")

def handle_clear_trials(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data== "clear_trials_confirm":
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM trial_lessons WHERE confirmed = FALSE')
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()

        query.edit_message_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
    else:
        query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

def get_clear_trials_handler():
    return CallbackQueryHandler(handle_clear_trials, pattern="^clear_trials_confirm$|^clear_trials_cancel$")

def get_all_handlers():
    return [
        get_conversation_handler(),
        CommandHandler('help', help_command),
        CommandHandler('courses', list_courses),
        CommandHandler('about', about),
        CommandHandler('view_trials', view_trials),
        CommandHandler('add_admin', add_admin_command),
        CommandHandler('delete_course', delete_course),
        CommandHandler('clear_trials', clear_trials),
        get_clear_trials_handler(),
        get_edit_course_handler(),
        CommandHandler('add_location', add_location),
        CommandHandler('list_locations', list_locations),
        CommandHandler('delete_location', delete_location),
        CommandHandler('confirm_trial', confirm_trial),
        get_confirm_trial_handler(),
        CommandHandler('filter_trials', filter_trials)
    ]